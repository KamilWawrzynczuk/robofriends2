{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","group","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3dc81b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=' tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt={`Robot ${id}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('CardList');\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })   \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    console.group('SaearchBox');\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--grean bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>     \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        } \r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Ooops. That is not good.</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\n\r\n\r\nclass CounterButton extends Component {\r\n \r\n    constructor() {\r\n       super();\r\n       this.state = {  \r\n           count: 0\r\n       }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if(this.state.count !== nextState.count) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: state.count + 1}\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n       return (\r\n        <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n       );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return false;\r\n    // }\r\n\r\n    render() {\r\n        console.log('Header');\r\n       return (\r\n           <div>\r\n               <h1 className='f1'>RoboFriends</h1>\r\n               <CounterButton color={'red'}/>\r\n           </div>    \r\n       );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    } \r\n}\r\n\r\nclass App extends Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <SearchBox searchChange = {onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div> \r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action= {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS: \r\n            return Object.assign({}, state, { robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger(); \n\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store} >  \n        <App />\n    </Provider>\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}